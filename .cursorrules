# Waverless 项目规则列表

- 关键概念
  - 规则
    即当前文件，需要和记忆保持同步
  - review
    项目根目录下的 review.md, 用于描述任务（问题）以及记录设计方案和执行记录
  - design.canvas
    提到canvas就是指他，因为目前没有别的canvas
    项目整体设计图，描述执行流程（数据传递、并行结构），数据结构关系
  - 流程图 | 流程结构
    使用细致的图表达并行或顺序结构，条件结构；以及数据流转
    一个阻塞执行的角色应该强化在块里，如子并行task，rpc caller，rpc handler，任务池

- 更新canvas流程
  将 /mnt/s3fs/waverless/design.canvas 拷贝成待时间戳的tmp和tmp.bak
  如 {项目根路径}/design.canvas.1703171246.tmp 
     和 {项目根路径}/design.canvas.1703171246.tmp.bak
  然后在 {项目根路径}/design.canvas.1703171246.tmp 中进行修改
  然后覆盖原来 /mnt/s3fs/waverless/design.canvas  以及{项目根路径}/design.canvas

- 提到“我更新了canvas”的情况，执行下python3 scripts/sync_md_files.py from_s3fs
  这样项目下的 {项目根路径}/design.canvas 才是最新的
  然后在理解分析新的设计

- 函数返回 result的情况，如果不想处理，只要要log error

- log使用tracing库

- error的结构是一个 WSError，包含子error结构形如 WsXXXErr，父结构实现Error derive，子结构只需要实现debug
  子结构尽量实现现有分类


## 1. 任务执行强制等待规则
- 制定计划后必须等待用户确认：
  - 即使计划看起来很完善
  - 即使修改很简单
  - 即使是修复明显的错误
  - 没有任何例外情况

- 执行前检查清单：
  - [ ] 任务是否已标记为 working？
  - [ ] 修改计划是否已制定？
  - [ ] 计划是否已经得到用户确认？
  - [ ] 是否在正确的位置记录了计划？

- 执行顺序强制要求：
  1. 标记任务状态
  2. 制定修改计划
  3. **等待用户确认**
  4. 得到确认后执行
  5. 记录执行结果
  6. 等待用户下一步指示

## 2. 基础工作流规则
- 开始执行分析任务时：
  先标记当前任务、或子任务为 (working) 状态，working状态同一时间只应该有一个

- 处理任务时：
  - 如果review还没有计划，则进行计划
  - 如有计划：
    - 未执行过计划：等待用户确认后执行
    - 已执行过计划：等待用户指示

- 分析完或执行完需要回写review规划或记录时：
  在对应working处更新内容，不要乱选择更新位置

- 编译相关：
  - agent自行需要编译或用户指明需要编译时：
    sudo -E $HOME/.cargo/bin/cargo build 2>&1 | tee compilelog
  - 需要分析当前问题时，先阅读 compilelog

- 步骤管理：
  每次执行完一个大步骤（更新计划 或 执行计划）后，等待用户下一步指示

## 3. 设计文件修改规则
- 修改前的准备：
  - 必须先查看目标文件的最新内容
  - 创建两份临时文件拷贝，都带上时间戳：
    * 一份用于修改
    * 一份作为备份

- 内容修改原则：
  - 不得擅自删除或覆盖原有内容
  - 只能修改确实需要更新的相关内容
  - 不相关的内容必须保持原样
  - 如果是对原有内容的覆盖修改，需要明确指出

- 文件管理：
  - 保持清晰的文件命名规范，包含时间戳
  - 在修改完成后进行必要的备份确认

## 4. 规则同步原则
- 规则更新时：
  - 规则文件(.cursorrules)和记忆(MEMORIES)必须同步更新
  - 确保两者内容保持一致性
  - 不允许单独更新其中之一