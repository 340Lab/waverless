# Waverless Project Rules

## Code Style
- 使用 Rust 2021 edition
- 遵循标准 Rust 命名约定
- 使用 4 空格缩进
- 对于有意未使用的变量，使用下划线前缀（如 _pack）
- 如果变量可能会被使用但目前未使用，保留原名
- 如果确定不需要验证的参数，直接使用下划线前缀

## RPC Message Handling
- 对于 RPC 消息的 Option 字段：
  - 如果是必需字段（不能缺省），需要在 verify 中进行 is_some() 校验
  - 如果是可选字段，使用 _pack 忽略变量，直接返回 true
- 消息验证规则：
  - 对于包含关键业务数据的请求（如 WriteOneDataRequest），必须验证所有必需字段
  - 对于简单的状态同步或查询请求（如 BatchDataRequest），可以跳过验证
- 验证函数实现：
  - 需要验证时，使用 pack 并编写完整的验证逻辑
  - 不需要验证时，使用 _pack 并直接返回 true

## Error Handling
- 使用 WSResult 作为错误返回类型
- 顶层错误类型应该实现 std::error::Error trait
- 子错误类型只需要实现 Debug trait
- 使用 ? 运算符进行错误传播

## Type System
- 为复杂的数据结构实现必要的 traits (Clone, Debug 等)
- 使用强类型，避免类型转换
- 为枚举类型实现必要的派生宏

## Development Process
- 每解决一个问题后立即进行编译检查
- 确保修改不会引入新的编译错误
- 按优先级逐个解决编译错误

## Documentation
- 为公共 API 提供文档注释
- 使用中文注释说明复杂的业务逻辑
- 包含示例代码说明用法

## Performance
- 避免不必要的克隆操作
- 使用异步操作处理 I/O
- 合理使用并发和并行

## Testing
- 为公共 API 编写单元测试
- 使用 cargo test 运行测试
- 包含集成测试

## Dependencies
- 明确指定依赖版本
- 最小化依赖数量
- 及时更新依赖版本

## Security
- 不在代码中硬编码敏感信息
- 使用安全的加密算法
- 正确处理用户输入

## Logging
- 使用 tracing 进行日志记录
- 包含适当的日志级别
- 记录关键操作和错误信息 
