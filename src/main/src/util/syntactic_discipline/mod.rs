//! # Syntactic Discipline Macros
//!
//! 本模块收录一类“**语法约束型宏（Syntactic Discipline Macros）**”，
//! 它们通过特定的语法结构，**在编译期引导并强制程序员遵循某种资源使用模式或行为规范**，
//! 从而实现类型系统难以直接表达的控制能力。
//!
//! ## 🧠 背景与动机
//!
//! 在实际开发中，某些资源（如 `Option<T>`、缓存对象、状态机、锁、连接等）
//! 具有明确的**生命周期或使用协议（usage protocol）**，
//! 稍有疏忽就可能造成潜在的逻辑错误（如未归还资源、状态不一致、重复释放等）。
//!
//! 由于 Rust 类型系统虽强大，但并非所有场景都能建模这类协议，
//! 本模块通过宏系统构造出一种 **作用域驱动的使用模式**：
//!
//! - 限定资源的**进入、使用与释放**逻辑必须嵌套在宏所定义的语法结构中；
//! - 使用者无法绕过该模式，从而实现**编译期的行为约束**；
//! - 实现效果类似线性类型（Linear Types）或类型状态（Typestate）检查，但无须扩展类型系统。

pub mod with_option;
