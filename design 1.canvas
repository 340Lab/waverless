{
	"nodes":[
		{"id":"cb82b904dab26671","type":"group","x":-3400,"y":-960,"width":4560,"height":3500,"label":"data"},
		{"id":"batch_transfer_group","type":"group","x":-1560,"y":120,"width":2300,"height":2040,"label":"Batch数据传输实现"},
		{"id":"write_split_group","type":"group","x":-3260,"y":120,"width":1470,"height":2360,"label":"WriteSplitDataTaskGroup 写入流程"},
		{"id":"data_write_flow","type":"group","x":-1600,"y":-600,"width":2680,"height":520,"label":"数据写入流程"},
		{"id":"batch_sender_group","type":"group","x":-1500,"y":200,"width":1000,"height":1000,"label":"写入端 [DataGeneral]"},
		{"id":"batch_receiver_group","type":"group","x":-400,"y":200,"width":1000,"height":900,"label":"接收端 [DataGeneral]"},
		{"id":"storage_write_flow","type":"group","x":0,"y":-540,"width":1020,"height":400,"label":"存储节点写入流程"},
		{"id":"7127ed217f71f72d","type":"group","x":-3240,"y":1180,"width":1010,"height":375,"label":"fn register_handle("},
		{"id":"data_general_core","type":"text","text":"# 数据管理核心模块\n- 数据流向控制\n- 并行结构管理\n- 错误处理链\n- 资源管理","x":-3050,"y":-406,"width":330,"height":234,"color":"4"},
		{"id":"b31695207931d96e","type":"text","text":"## fn get_or_del_data\n- 数据检索和删除\n- 资源清理\n- 缓存一致性\n- 并发访问控制","x":-2290,"y":-622,"width":330,"height":156,"color":"4"},
		{"id":"133214da264cfe72","type":"text","text":"## struct DataGeneral\n- 提供数据读写接口\n- 管理元数据\n- 协调各子模块功能\n- 错误处理和恢复\n- 资源生命周期","x":-2760,"y":-680,"width":340,"height":214,"color":"4"},
		{"id":"core_functions","type":"text","text":"## fn write_data\n- 同步/异步写入\n- 数据完整性保证\n- 分片并行写入\n- 缓存节点同步\n- 错误重试机制","x":-2405,"y":-427,"width":280,"height":275,"color":"4"},
		{"id":"general_phase2","type":"text","text":"General阶段2：调度\n- 生成unique_id\n- 发送调度请求\n- 等待决策返回","x":-1560,"y":-380,"width":200,"height":100,"color":"1"},
		{"id":"storage_node_3","type":"text","text":"存储节点1","x":-425,"y":-550,"width":150,"height":60,"color":"3"},
		{"id":"master_node","type":"text","text":"Master节点 [DataMaster]\n- schedule_data()\n1. 生成DataSetMeta\n2. 创建DataSplits\n3. 分配存储节点\n4. 返回调度决策","x":-1100,"y":-510,"width":200,"height":160,"color":"2"},
		{"id":"storage_group","type":"text","text":"存储节点组","x":-620,"y":-510,"width":150,"height":60,"color":"3"},
		{"id":"821e415b6438e20d","type":"text","text":"## struct DataSplit\n- 数据分片管理\n- 分片信息维护\n- 分片操作协调\n- 存储节点分配\n- 局部性优化","x":-2932,"y":-92,"width":342,"height":158,"color":"4"},
		{"id":"cache_group","type":"text","text":"缓存节点组","x":-620,"y":-310,"width":150,"height":60,"color":"5"},
		{"id":"general_phase1","type":"text","text":"General阶段1：准备\n- 初始化DataItems\n- 计算数据大小\n- 创建SharedMemHolder","x":-1560,"y":-510,"width":200,"height":100,"color":"1"},
		{"id":"data_item","type":"text","text":"# 数据项处理\n\n## enum WriteSplitDataTaskGroup\n- 管理数据分片写入任务组\n- 分片合并优化\n- 状态同步\n- 并行控制\n","x":-2990,"y":180,"width":450,"height":280,"color":"3"},
		{"id":"1ec171d545e8995d","type":"text","text":"## SharedMemHolder\n- 共享内存数据访问\n- 资源自动管理","x":-3085,"y":794,"width":300,"height":150},
		{"id":"223edf4677db9339","type":"text","text":"pub struct WriteSplitDataManager {\n    // 只存储任务句柄\n    handles: DashMap<UniqueId, WriteSplitDataTaskHandle>,\n}","x":-3090,"y":1000,"width":610,"height":140},
		{"id":"f515ecb9aee18fc7","type":"text","text":"# 后续写入 [异步执行]\n\n## 状态管理\n- 写入任务追踪\n- 并发控制\n- 写入顺序保证","x":-2552,"y":1218,"width":302,"height":275},
		{"id":"06d4a92778dd83c8","type":"text","text":"# 第一个分片开始写入 [阻塞执行]\n\n## 初始化写入\nfn start_first_split(data: Vec<u8>) -> Result<(), WSError> {\n    let task = self.build_task(data, 0);\n    self.tasks.push(task);\n    self.current_size += data.len();\n    Ok(())\n}\n\n## 错误处理\n- 写入失败记录日志\n- 返回具体错误类型","x":-3220,"y":1201,"width":455,"height":310},
		{"id":"general_phase3","type":"text","text":"General阶段3：分发\n- 解析调度决策\n- 创建写入任务组\n- 初始化并发控制","x":-1560,"y":-210,"width":200,"height":100,"color":"1"},
		{"id":"storage_node_4","type":"text","text":"存储节点2","x":-420,"y":-480,"width":150,"height":60,"color":"3"},
		{"id":"storage_node_5","type":"text","text":"存储节点3","x":-420,"y":-400,"width":150,"height":60,"color":"3"},
		{"id":"cache_node_1","type":"text","text":"缓存节点1","x":-420,"y":-360,"width":150,"height":60,"color":"5"},
		{"id":"97d3d9fd7432a861","type":"text","text":"# WriteSplitDataTaskHandle::submit_split() 实现 [异步发送]\n\n## match write_type {\n- WriteSplitDataType::File => 文件写入任务\n- WriteSplitDataType::Mem => 内存写入任务\n}\n\n## 发送任务 [channel阻塞]\ntx.send(task).await","x":-2189,"y":1160,"width":347,"height":445},
		{"id":"batch_request1","type":"text","text":"# BatchDataRequest(1)\n- request_id\n- block_type\n- block_index: 0\n- data","x":-620,"y":190,"width":250,"height":240,"color":"2"},
		{"id":"batch_initiator","type":"text","text":"# 发起节点 [DataGeneral]\n\n## call_batch_data()\n- 分割数据块(1MB)\n- 创建有界任务池\n- 建议并发数=3\n- 任务队列控制","x":-1400,"y":331,"width":300,"height":300,"color":"1"},
		{"id":"batch_manager","type":"text","text":"# BatchTransfer","x":-1100,"y":744,"width":300,"height":300,"color":"1"},
		{"id":"5c4357fc2216ea51","type":"text","text":"## batch写入接口\n- 缓存主动推送\n- 并行写入支持\n- 错误恢复机制\n- 内存复用优化","x":-2180,"y":-92,"width":250,"height":120,"color":"4"},
		{"id":"cache_node_2","type":"text","text":"缓存节点2","x":-420,"y":-280,"width":150,"height":60,"color":"5"},
		{"id":"cache_node_3","type":"text","text":"缓存节点3","x":-420,"y":-200,"width":150,"height":60,"color":"5"},
		{"id":"storage_node_1","type":"text","text":"存储节点1\n接收层:\n- 接收分片请求\n- 版本号验证\n- 数据完整性校验\n写入任务层:\n- 分片范围验证\n- 并发写入控制\n- 错误重试机制\n本地存储层:\n- 数据持久化\n- 版本管理\n- 空间回收\n结果返回:\n- 写入状态\n- 远程版本号\n- 错误信息","x":40,"y":-500,"width":200,"height":280,"color":"1"},
		{"id":"write_task_1","type":"text","text":"写入任务1\n- 分片范围验证\n- 数据完整性检查\n- 并发写入控制\n- 错误重试","x":380,"y":-500,"width":200,"height":120,"color":"2"},
		{"id":"write_result_1","type":"text","text":"写入结果1\n- 成功/失败\n- 远程版本号\n- 错误信息","x":640,"y":-280,"width":200,"height":100,"color":"4"},
		{"id":"write_task_file","type":"text","text":"# ToFile 写入流程 [阻塞执行]\n\n## WriteSplitDataTaskGroup::ToFile\n- file_path: PathBuf\n- tasks: Vec<JoinHandle<()>>\n- rx: mpsc::Receiver<JoinHandle<()>>\n- expected_size: usize\n- current_size: usize\n\n## 操作流程 [文件IO阻塞]\n1. OpenOptions::new()\n   .create(true)\n   .write(true)\n2. seek(offset)\n3. write_all(data)\n4. 错误记录：\n   tracing::error!(\"Failed to write file data at offset {}\")\n","x":-2216,"y":544,"width":400,"height":400,"color":"1"},
		{"id":"write_task_mem","type":"text","text":"# ToMem 写入流程 [阻塞执行]\n\n## WriteSplitDataTaskGroup::ToMem\n- shared_mem: SharedMemHolder\n- tasks: Vec<JoinHandle<()>>\n- rx: mpsc::Receiver<JoinHandle<()>>\n- expected_size: usize\n- current_size: usize\n\n## 操作流程 [内存写入阻塞]\n1. shared_mem.write(offset, data)\n2. 错误记录：\n   tracing::error!(\"Failed to write memory data at offset {}\")\n","x":-2650,"y":526,"width":400,"height":436,"color":"2"},
		{"id":"b0205b4457afeb2b","type":"text","text":"## SharedMemOwnedAccess\n- 共享内存所有权控制\n- 访问安全保证\n- 生命周期管理","x":-2330,"y":242,"width":364,"height":178},
		{"id":"e2576a54f3f852b3","type":"text","text":"# process_tasks() 实现 [阻塞循环]\n\n## 循环处理 [select阻塞]\n1. try_complete() 检查完成状态\n2. tokio::select! {\n   - rx.recv() => 接收新任务\n   - futures::future::select_all(tasks) => 等待任务完成\n}\n\n## 完成条件\n- current_size >= expected_size\n- 返回 proto::DataItem","x":-3035,"y":1820,"width":377,"height":460},
		{"id":"155106edf5eb3cd7","type":"text","text":"# try_complete() 实现 [同步检查]\n\n## 返回 Option<proto::DataItem>\n- ToFile => proto::DataItem::new_file_data()\n- ToMem => proto::DataItem::new_mem_data()","x":-3074,"y":2300,"width":455,"height":180},
		{"id":"4dbe01dc59cea4c2","type":"text","text":"pub struct WriteSplitDataTaskHandle {\n    tx: mpsc::Sender<tokio::task::JoinHandle<()>>,\n    write_type: WriteSplitDataType,\n}","x":-2552,"y":1700,"width":418,"height":160},
		{"id":"20145fd68e8aaa75","type":"text","text":"# 构造 [同步初始化]\n\n## 任务组初始化\nfn new_task_group(type_: WriteSplitDataType) -> Self {\n    let (tx, rx) = mpsc::channel(32);\n    Self {\n        type_,\n        tasks: Vec::new(),\n        rx,\n        expected_size: 0,\n        current_size: 0,\n    }\n}\n\n## 参数验证\n- 检查写入类型\n- 验证初始参数","x":-3185,"y":1580,"width":450,"height":220},
		{"id":"batch_request2","type":"text","text":"# BatchDataRequest(2)\n- request_id\n- block_type\n- block_index: 1\n- data","x":-620,"y":470,"width":250,"height":120,"color":"2"},
		{"id":"batch_request3","type":"text","text":"# BatchDataRequest(3)\n- request_id\n- block_type\n- block_index: 2\n- data","x":-620,"y":610,"width":250,"height":120,"color":"2"},
		{"id":"batch_receiver_tasks","type":"text","text":"WriteSplitDataTaskGroup","x":-160,"y":570,"width":400,"height":300,"color":"1"}
	],
	"edges":[
		{"id":"master_to_phase2","fromNode":"master_node","fromSide":"left","toNode":"general_phase2","toSide":"right","label":"调度决策\n- version\n- splits\n- nodes"},
		{"id":"phase2_to_phase3","fromNode":"general_phase2","fromSide":"bottom","toNode":"general_phase3","toSide":"top","label":"决策信息"},
		{"id":"phase3_to_storage","fromNode":"general_phase3","fromSide":"right","toNode":"storage_group","toSide":"left","label":"分发存储任务"},
		{"id":"storage_to_nodes","fromNode":"storage_group","fromSide":"right","toNode":"storage_node_3","toSide":"left"},
		{"id":"storage_to_nodes2","fromNode":"storage_group","fromSide":"right","toNode":"storage_node_4","toSide":"left"},
		{"id":"storage_to_nodes3","fromNode":"storage_group","fromSide":"right","toNode":"storage_node_5","toSide":"left"},
		{"id":"phase3_to_cache","fromNode":"general_phase3","fromSide":"right","toNode":"cache_group","toSide":"left","label":"分发缓存任务"},
		{"id":"cache_to_nodes","fromNode":"cache_group","fromSide":"right","toNode":"cache_node_1","toSide":"left"},
		{"id":"cache_to_nodes2","fromNode":"cache_group","fromSide":"right","toNode":"cache_node_2","toSide":"left"},
		{"id":"cache_to_nodes3","fromNode":"cache_group","fromSide":"right","toNode":"cache_node_3","toSide":"left"},
		{"id":"initiator_to_manager","fromNode":"batch_initiator","fromSide":"right","toNode":"batch_manager","toSide":"left","label":"创建批量传输"},
		{"id":"initiator_to_request1","fromNode":"batch_manager","fromSide":"right","toNode":"batch_request1","toSide":"left","label":"并发发送\n数据块1"},
		{"id":"initiator_to_request2","fromNode":"batch_manager","fromSide":"right","toNode":"batch_request2","toSide":"left","label":"并发发送\n数据块2"},
		{"id":"initiator_to_request3","fromNode":"batch_manager","fromSide":"right","toNode":"batch_request3","toSide":"left","label":"并发发送\n数据块3"},
		{"id":"b5a17c0afede8e4a","fromNode":"data_general_core","fromSide":"right","toNode":"133214da264cfe72","toSide":"bottom"},
		{"id":"2ad5991c43fd6098","fromNode":"data_general_core","fromSide":"right","toNode":"821e415b6438e20d","toSide":"top"},
		{"id":"caa45c92a135042c","fromNode":"data_general_core","fromSide":"right","toNode":"core_functions","toSide":"left"},
		{"id":"09c7b9957992d62d","fromNode":"data_general_core","fromSide":"right","toNode":"b31695207931d96e","toSide":"left"},
		{"id":"adfa1cca1009ff43","fromNode":"data_general_core","fromSide":"right","toNode":"5c4357fc2216ea51","toSide":"left"},
		{"id":"ef995a514a2210bb","fromNode":"5c4357fc2216ea51","fromSide":"right","toNode":"batch_transfer_group","toSide":"top"},
		{"id":"3d79872a234731c0","fromNode":"cache_node_3","fromSide":"bottom","toNode":"batch_transfer_group","toSide":"top"},
		{"id":"9094221953b6c685","fromNode":"write_task_mem","fromSide":"top","toNode":"b0205b4457afeb2b","toSide":"bottom"},
		{"id":"77ec04f5deef7cee","fromNode":"write_task_mem","fromSide":"left","toNode":"1ec171d545e8995d","toSide":"top"},
		{"id":"7b99fb72410f07d9","fromNode":"06d4a92778dd83c8","fromSide":"bottom","toNode":"20145fd68e8aaa75","toSide":"top"},
		{"id":"df9b4bc9170fdec1","fromNode":"20145fd68e8aaa75","fromSide":"right","toNode":"4dbe01dc59cea4c2","toSide":"left"},
		{"id":"61e0637af4beba94","fromNode":"f515ecb9aee18fc7","fromSide":"left","toNode":"4dbe01dc59cea4c2","toSide":"left"},
		{"id":"f7105db89ffabd1e","fromNode":"20145fd68e8aaa75","fromSide":"bottom","toNode":"e2576a54f3f852b3","toSide":"top"},
		{"id":"7504b1b3a99e992c","fromNode":"4dbe01dc59cea4c2","fromSide":"right","toNode":"97d3d9fd7432a861","toSide":"bottom","label":"获取到handle"},
		{"id":"a993a3f4d7b2211d","fromNode":"97d3d9fd7432a861","fromSide":"left","toNode":"e2576a54f3f852b3","toSide":"right"},
		{"id":"a996588f6c59c88f","fromNode":"e2576a54f3f852b3","fromSide":"bottom","toNode":"155106edf5eb3cd7","toSide":"top"},
		{"id":"a42104592fedd4c7","fromNode":"97d3d9fd7432a861","fromSide":"right","toNode":"write_task_mem","toSide":"bottom"},
		{"id":"c45aaa564ae87a7c","fromNode":"97d3d9fd7432a861","fromSide":"right","toNode":"write_task_file","toSide":"bottom"},
		{"id":"write_flow_1","fromNode":"20145fd68e8aaa75","fromSide":"top","toNode":"06d4a92778dd83c8","toSide":"bottom","label":"初始化完成"},
		{"id":"write_flow_2","fromNode":"06d4a92778dd83c8","fromSide":"right","toNode":"f515ecb9aee18fc7","toSide":"left","label":"首个分片写入完成"},
		{"id":"write_flow_5","fromNode":"e2576a54f3f852b3","fromSide":"left","toNode":"155106edf5eb3cd7","toSide":"left","label":"检查完成状态"},
		{"id":"86a2aa913f7bd3d9","fromNode":"223edf4677db9339","fromSide":"bottom","toNode":"06d4a92778dd83c8","toSide":"top"}
	]
}